ВСЕГДА ИСПОЛЬЗУЙ ("use strict";) это строгий режим для соблюдения всех правил ES6.

Дженерики это - тип данных который может быть чем угодно (как простым так и сложным)

Nan - not a numbre 

Как таковых констант в JS не существует. 
Лучшее всего использовать константы для хранения данных (let - это переменная, const - это константа).


Use strict - это правило которое необхоимо использовать для строго режима, т.е в этом режиме надо объявлять,
переменную по правилам let this = " ", а не без думно писать this = " ", по этому лучше использовать строгий режим
как правильно писать указан на первой строке!!

Сущетвует 8 типов данных  их можно разделить на 2 класса. 

Простые типы данных: 

1. int - числа (есть не большое но мы не можем выйти за рамки числа 2^52 (два в пятьдесят второй степени))
2. string - строки
3. boolean - логические типы True - False (правда или ложь)
4. null - это пустота т.е ничего нет 
5. undefind - это тип в котором ничего нет но он есть (аналогия с холодильником есть холодильник, но внутри ничего нет)
6. Symbol - новый тип данных (добавлен в ES6)
7. Bigint - это тип данных которые описывают большие числа 

Объекты: 

Объекты в свою очередь делятся на две подкатегории спецальные объекты и обычные объекты.

Спец.объекты 

1. Array[] (массивы) - это комплексный тип данный, грубо говоря это списки которые могут содержать как и int так и str, boolean и т.д.
Массив это частный случай объекта и это не отдельный вид объекта! 
Массивы нужны для того что бы элементы находились строго по порядку. 
Индексируются с 0, форма записи ниже: 

const arr = [1,2,3,4,5]
arr[0] = 1
arr[6 = 14]

2. Function (функции) -
3. Object data - 
4. Regular expression (обычные выражения) - 
5. Erorr (ошибки) - 

Объект это комплексный тип данных в котором может сожержаться что угодно, в объект можно добавить еще один объект,
массив в котором будет объект!
Пример: 
(для того что бы достать что нибудь из объекта указываем название объекта и свойства объекта 
(это все что вложенно в объект) 

Выглядит так:
    obj.name
    obj.lastName и т.д и т.п)

const obj = {
    name: "Doniyor",
    lastName: "Kuzybaev",
    secondName: "Taxirovich"
}; 

Взаимодействие с юзером. Данные функции работают только в браузере не забывай!:
1. confirm() - задает вопрос пользователю и получаем ответ ввиде true & false
2. promt() - получает ответ от пользователя как это выглядит name = promot("вам есть 18?", "") -> не забывай отставлять,
кавычки для получения ответа. 

Пример: 

const objTwo = {
    thisName: "Barni",
    hisprot: "Dog",
    someThing: {
        lastNameTwo: "Khatamova",
        nameTwo: "Guzal"
    }
};
console.log(objTwo.someThing.lastNameTwo, objTwo.someThing.nameTwo);

Таким образом можно заносить в объект данные!!! 
typeof() - метод которые показывает в консоле какой тип данных используется!!!


const ansers = {
    name: " ",
    lastName: " ",
    age: ''
};

ansers.name = prompt('Ваше имя?');
ansers.lastName = prompt('Ваша фамилия?');
ansers.age = prompt('Ваш возраст?');

document.write(ansers.name, ansers.lastName, ansers.age);


`${это называется интерполяция}`

!!! Лайфхак для того что неписать каждый раз let (хотя let используется редко) можно записывать таким образом. 

let name = "Doniyor", 
    lastName = "Kuzibaev";

Постфиксные: Сначала выводит значение а потом уже его увеличивает.
i++ - это называется опереатов инкримента(прибавляет одну еденицу). 
i-- - это называется оператов декримента(уменьшает одну еденицу).

Префиксные: Увеличивает и выдает увеличенное значение.
++i - это называется опереатов инкримента(прибавляет одну еденицу). 
--i - это называется оператов декримента(уменьшает одну еденицу).

== - сравнивает по значению 
=== - строго сравнивает по типу данных

GIT

git init - гит будет следить за этой папкой
git config --global (глобаьная верния, local - локальная )user.name - передставление гиту 
git config --global user.email - почта работника.

git status - проверяет состояние файлов на наличие точки возврата. 
git add - добавляет точку слежения за файлом, если написать --А то будет добавлены все файлы. 
Если написать так *.js то добявятся все файлы которые сохранены как с расширением .js.
git commit - эта команда добавляет все файлы которые были добавлены в виртуальную папку. 
Но прописывать надо так git commit -a (где а означает all) -m(где m означает сообщение между m и кавычками не дожно быть пробела)"first git commit"
git log - проверяет статус авторизации и кем что менялось. 
git push - добовляет все изменения на сайт GitHub.com 
git clone (ссылку надо вставить с гитхаба) it (название папки куда все нужно скопировать) - копирует репозиторий на копьютер.
git pull - тянет все изменения в наш файл. 
:wd! - (перед этим надо нажать cmd c  - 2 рада):wq! - выходит их объедененной системы.
git-ignored - эт своего рода robot.txt файл который говорит что можно качать а что нельзя. 
git branch <name of new branch> - Чтобы в Git добавить ветку мы используем:
git checkout <name of branch> - Если вы планируете переместиться на другую ветку, в том числе только что созданную, необходимо написать checkout:
Если пользователю нужно получить список определенного множества веток, то тогда можно воспользоваться ключами. 
Одними из самых распространенных будут:
-r — при использовании этого ключа мы получим список удаленных веток,
-a — используя этот параметр, в выводе будут удаленные и локальные ветки.
В Git предусмотрено слияние — перенос изменений с одной ветки на другую. 
Однако сливаемая ветка (под этим определением мы подразумеваем ветку, у которой берем изменения для «вливания» их в другую ветвь) никак не меняется и остается в прежнем состоянии. 
Такие преобразования мы получаем, применив git merge: git merge <name of merged branch> 

IF-ESLE-ELSE IF: 
Ну это ты очень хорошо знаешь но не забывай какой синтаксис:
if () {
    return
} else if () {
    return
} else {
    return 
};

Можно использовать тернарный опетор и это выглядит следующим образом: 
(num === 50) ? console.log("OK") : console.log("NOT OK!");
если num (четкое равно) 50 ? (тогда) выведи это () : (или же) выведи это ()

Главное запомни как это строится.
Циклы: 
В JS есть три основных способа использовании циклов. Все примеры ниже:
// пока наше условие не будет выполнено увеличивай на 1 
while (numb < 55) {
    console.log(numb);
    numb++;
}
// Сделай что то и после цикла проверяется условие.
 do {
     console.log(numb);
     numb++;
}
 while (numb < 55);
// для (переменной и которая равняется одному, и меньше восьми, увеличь на и на 1)
for (let i = 1; i < 8; i++){
     console.log(i);
     numb += 1;
     console.log(numb);
}

Можно совместить цикл вместе с условием if см. пример а так же использовать прирывание (break): 
for (let i = 1; i < 10; i++){
    if (i === 6) {
        break;
    } else {
        i++;
        break;
    }
}

Можно использовать continue (оно убирает то что указанно в условие в выводе): 
for (let i = 1; i < 10; i++){
    if (i === 6) {
        break;
    } else {
        i++;
        break;
    }
}


Заполнение массива с помощью цикла: 

    const arrayOfNumbers = [];

    for (let i = 5; i < 11; i++) {
        arrayOfNumbers[i - 5] = i;
    }

    console.log(arrayOfNumbers);